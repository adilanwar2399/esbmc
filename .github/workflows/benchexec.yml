name: Run Benchexec
on:
  workflow_dispatch:
    inputs:
      timeout:
        description: 'Timeout for each benchmarks (in seconds)'
        required: true
        default: '30'
      options:
        description: 'Command-line flags to pass via ESBMC_OPTS'
        required: false
        default: ''
      output:
        description: 'File output name (to keep the logs)'
        required: false
        default: ''
      svbenchmarks:
        description: 'Git branch, tag, or commit of SV-Benchmarks to use'
        required: true
        default: 'main'
      mode:
        type: choice
        description: Benchecex run mode
        options:
        - Full
        - Task
        - RunSet
      runset:
        type: choice
        description: Run-set to use (be sure to set mode to "RunSet")
        options:
        - SV-COMP24_unreach-call
        - SV-COMP24_no-data-race
        - SV-COMP24_valid-memcleanup
        - SV-COMP24_valid-memsafety
        - SV-COMP24_no-overflow
        - SV-COMP24_termination
      task:
        type: choice
        description: Task to use Run-set to use (be sure to set mode to "Task")
        options:
        - ReachSafety-Arrays
        - ReachSafety-BitVectors
        - ReachSafety-ControlFlow
        - ReachSafety-ECA
        - ReachSafety-Floats
        - ReachSafety-Heap
        - ReachSafety-Loops
        - ReachSafety-ProductLines
        - ReachSafety-Recursive
        - ReachSafety-Sequentialized
        - ReachSafety-XCSP
        - ReachSafety-Combinations
        - ReachSafety-Hardware
        - ReachSafety-Hardness
        - ConcurrencySafety-Main
        - SoftwareSystems-AWS-C-Common-ReachSafety
        - SoftwareSystems-BusyBox-ReachSafety
        - SoftwareSystems-coreutils-ReachSafety
        - SoftwareSystems-DeviceDriversLinux64-ReachSafety
        - SoftwareSystems-DeviceDriversLinux64Large-ReachSafety
        - SoftwareSystems-uthash-ReachSafety
        - NoDataRace-Main
        - MemSafety-MemCleanup
        - MemSafety-Arrays
        - MemSafety-Heap
        - MemSafety-LinkedLists
        - MemSafety-Other
        - MemSafety-Juliet
        - SoftwareSystems-BusyBox-MemSafety
        - SoftwareSystems-coreutils-MemSafety
        - SoftwareSystems-DeviceDriversLinux64-MemSafety
        - SoftwareSystems-OpenBSD-MemSafety
        - SoftwareSystems-uthash-MemSafety
        - ConcurrencySafety-MemSafety
        - NoOverflows-Main
        - NoOverflows-Juliet
        - SoftwareSystems-BusyBox-NoOverflows
        - SoftwareSystems-coreutils-NoOverflows
        - SoftwareSystems-uthash-NoOverflows
        - ConcurrencySafety-NoOverflows
        - Termination-BitVectors
        - Termination-MainControlFlow
        - Termination-MainHeap
        - Termination-Other

jobs:


  build-unix:
    uses: ./.github/workflows/build.yml
    with:
      operating-system: ubuntu-latest
      build-flags: '-b Release -e Off'
      testing: false     

  run-benchexec:
    runs-on: ['self-hosted', 'Linux', 'x64', 'benchexec']
    timeout-minutes: 12000
    needs: build-unix
    steps:
      - name: Setup SV-Benchmarks version
        run: |
          cd $HOME/sv-benchmarks
          git fetch --all --tags
          git checkout ${{ inputs.svbenchmarks }}
          upstream=`git branch -vv | sed -rn 's/^\* [^[]+\[([^]]+)\].*/\1/p'`
          test -z "$upstream" || git merge --ff-only
          echo "sv-benchmarks revision:"
          git rev-parse HEAD
      - name: Download Linux Build
        uses: actions/download-artifact@v1
        with:
          name: release-ubuntu-latest
          path: ./
      - name: Checkout code
        uses: actions/checkout@master
        with:
          path: esbmc-src
      - name: Run Benchexec (Full)
        if: ${{ inputs.mode == 'Full' }}
        run: ./esbmc-src/scripts/benchexec.sh -f
        env:
          TIMEOUT: ${{ inputs.timeout }}
          ESBMC_OPTS: ${{ inputs.options }}
      - name: Run Benchexec (RunSet)
        if: ${{ inputs.mode == 'RunSet' }}
        run: ./esbmc-src/scripts/benchexec.sh -r ${{ inputs.runset }}
        env:
          TIMEOUT: ${{ inputs.timeout }}
          ESBMC_OPTS: ${{ inputs.options }}
      - name: Run Benchexec (Task)
        if: ${{ inputs.mode == 'Task' }}
        run: ./esbmc-src/scripts/benchexec.sh -t ${{ inputs.task }}
        env:
          TIMEOUT: ${{ inputs.timeout }}
          ESBMC_OPTS: ${{ inputs.options }}
      - name: Show summary
        run: tail $HOME/esbmc-output/*results*.txt
      - name: Save logs
        if: ${{ inputs.output != '' }}
        run: cp $HOME/output.zip $HOME/${{ inputs.output }}
      - name: Move output
        run: mv $HOME/output.zip ./output.zip      
      - name: Debug Info
        run: ls
      - name: Checkout code
        uses: actions/checkout@master
        with:
          path: esbmc-src      
      - uses: actions/upload-artifact@v1
        with:
          name: esbmc-result
          path: output.zip
      - name: Run Validation (Full)
        if: ${{ inputs.mode == 'Full' }}
        run: ./esbmc-src/scripts/witness.sh -f
      - name: Run Validation (RunSet)
        if: ${{ inputs.mode == 'RunSet' }}
        run: ./esbmc-src/scripts/witness.sh -r ${{ inputs.runset }}
      - name: Run Validation (Task)
        if: ${{ inputs.mode == 'Task' }}
        run: ./esbmc-src/scripts/witness.sh -t ${{ inputs.task }}
      - name: Move output
        run: mv $HOME/witness-output.zip ./witness-output.zip      
      
      - uses: actions/upload-artifact@v1
        with:
          name: witness-result
          path: witness-output.zip

      
